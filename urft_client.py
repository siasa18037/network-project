import socket
import sys
from datetime import datetime as dt
import os

buf = 1024
timeout = 0.25
sep = b'/||/'  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô bytes ‡πÅ‡∏ó‡∏ô string
current_ack = 0

if len(sys.argv) < 4:
    print("python urft_client.py <file_path> <server_ip> <server_port>")  # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    sys.exit(1)

client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
client_socket.settimeout(timeout)
server_address = (sys.argv[2], int(sys.argv[3]))
client_socket.setblocking(True)

file_path = sys.argv[1]
file_name = os.path.basename(file_path)

with open(file_path, 'rb') as file:
    file_data = file.read()
    print("‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß üìñ")

file_size = len(file_data)

# ‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
while True:
    sender_time = dt.now()
    packet = b'-2' + sep + file_name.encode('utf-8')  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô bytes
    client_socket.sendto(packet, server_address)
    
    try:
        ack_data, server = client_socket.recvfrom(buf)
        ack_parts = ack_data.split(sep)  # ‡πÉ‡∏ä‡πâ bytes ‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô

        if ack_parts[0] != b"ACK":
            continue

        time = dt.strptime(ack_parts[1].decode('utf-8'), "%Y-%m-%d %H:%M:%S.%f")
        rtt = (time.microsecond - sender_time.microsecond) * 0.000001
        client_socket.settimeout(timeout)

        print(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏° RTT: {rtt} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‚è±Ô∏è")
        break

    except socket.timeout:
        print("--‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡∏£‡∏µ‡πÄ‡∏ó‡∏£‡∏≤‡∏ô‡∏™‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ‚è≥--")

# ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå
while True:
    if current_ack == -1:
        break

    if current_ack >= file_size:
        packet = b'-1' + sep + b'FIN'
        client_socket.sendto(packet, server_address)
        print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á FIN: {current_ack} üì§")

    print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á SEQ: {current_ack} - {file_size - buf} üì¶")

    for seq in range(current_ack, file_size, buf):
        chunk = file_data[seq: seq + buf]
        packet = str(seq).encode('utf-8') + sep + chunk
        client_socket.sendto(packet, server_address)

    try:
        while True:
            ack_data, server = client_socket.recvfrom(40)
            ack_parts = ack_data.split(sep)  # ‡πÉ‡∏ä‡πâ bytes ‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô

            flag = ack_parts[0].decode('utf-8')
            current_ack = int(ack_parts[1].decode('utf-8'))
            print(f'‡∏£‡∏±‡∏ö ACK ‡∏à‡∏≤‡∏Å {flag}: {current_ack} üì®')

            if flag == 'END':
                break

    except socket.timeout:
        print("--‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡∏£‡∏µ‡πÄ‡∏ó‡∏£‡∏≤‡∏ô‡∏™‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ‚è≥--")

    except ConnectionResetError:
        print("‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÇ‡∏î‡∏¢‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ")

print("‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß üéâ")
print("--------- ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡πÄ‡∏•‡πâ‡∏ß ---------")
client_socket.close()
